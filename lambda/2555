<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
 <title>Parametric datatype-genericity | Lambda the Ultimate</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<base href="http://lambda-the-ultimate.org/" />
<style type="text/css" media="all">@import "misc/drupal.css";</style> <link rel="SHORTCUT ICON" href="favicon.ico"> <link rel="stylesheet" type="text/css" href="themes/chameleon/common.css" />
<style type="text/css" media="all">@import "themes/chameleon/ltu/style.css";</style></head><body>
 <div id="header">  <h1 class="site-name title"><a href="">Lambda the Ultimate</a></h1>  <img src="themes/chameleon/ltu/tagline.png" alt="The Programming Languages Weblog" /><div id="search-form" style="text-align:right;"><form action="search" method="post">  <input class="form-text" type="text" size="15" value="" name="edit[keys]" id="edit-keys" />&nbsp;  <input class="form-submit" type="submit" value="Search" />&nbsp;</form></div>
</div>
 <table id="content">
  <tr>
   <td id="sidebar-left"><div class="block block-block" id="block-block-1">
 <h2 class="title"></h2>
 <div class="content"><b>
<div style="text-align:right">
<p>
<a href="/rss.xml"><img src="/misc/xml.gif" border=0 /></a><p>
<a href="/">Home</a><p>
<a href="/node/view/34">Feedback</a><p>
<a href="/node/view/40">FAQ</a><p>
<a href="node/view/492">Getting Started</a><p>
<a href="/forum/1">Discussions</a><p>
<a href="/forum/2">Site operation discussions</a><p>
<a href="/tracker">Recent Posts</a><p>
<a href="/node/add/forum/1">(new topic)</a><p>
<a href="/node/view/49">Departments</a><p>
<a href="/node/view/2">Courses</a><p>
<a href="/node/view/4">Research Papers</a><p>
<a href="/node/view/3">Design Docs</a><p>
<a href="/node/view/5">Quotations</a><p>
<a href="/node/view/7">Genealogical Diagrams</a><p>
<a href="/classic/lambda-archive1.html">Archives</a>
</div>
</b>
<hr style="border-width:0 0 1px 0" />
</div>
</div>
<div class="block block-user" id="block-user-0">
 <h2 class="title">User login</h2>
 <div class="content"><form action="user/login?destination=node%2F2555" method="post">
<div class="user-login-block">
<div class="form-item">
 <label for="edit-name">Username:</label><br />
 <input type="text" maxlength="64" class="form-text" name="edit[name]" id="edit-name" size="15" value="" />
</div>
<div class="form-item">
 <label for="edit-pass">Password:</label><br />
 <input type="password" class="form-password" maxlength="64" name="edit[pass]" id="edit-pass" size="15" value="" />
</div>
<input type="submit" class="form-submit" name="op" value="Log in"  />
</div>

</form>
<div class="item-list"><ul><li><a href="user/register" title="Create a new user account.">Create new account</a></li><li><a href="user/password" title="Request new password via e-mail.">Request new password</a></li></ul></div></div>
</div>
<div class="block block-user" id="block-user-1">
 <h2 class="title">Navigation</h2>
 <div class="content"><div class="menu">
<ul>
<li class="leaf"><a href="tracker">recent posts</a></li>

</ul>
</div></div>
</div>
</td>
   <td id="main">
<div class="breadcrumb"><a href="">Home</a></div><h2>Parametric datatype-genericity</h2>
<!-- begin content -->
<div class="node">
 <div class="content">
<a href="http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/parametric.pdf">Parametric datatype-genericity</a>. Jeremy Gibbons and Ross Paterson. Submitted for publication.<p >
<blockquote >
Datatype-generic programs are programs that are parametrized by a datatype or type functor. There are two main styles of datatype-generic programming: the Algebra of Programming approach, characterized by structured recursion operators parametrized by a shape functor, and the Generic Haskell approach, characterized by case analysis over the structure of a datatype. We show that the former enjoys a kind of parametricity, relating the behaviours of generic functions at different types; in contrast, the latter is more ad hoc, with no coherence required or provided between the various clauses of a definition.
</blockquote><p >
How could we have not mentioned this before?<p >
The main result of this paper is that fold is a higher-order natural transformation. This means, the authors explain,  that fold is a rather special kind of datatype-generic operator, both enjoying and requiring coherence between its datatype-specific instances.<p >
We had several long discussions about the uniqueness of fold, which may serve as an introduction for those new to this sort of discussion. The tutorial on the universality of fold is, of course, on the papers page.<p >
For some reason I feel a craving for bananas... </div>
 <div class="links">By <a href="user/1" title="View user profile.">Ehud Lamm</a> at 2007-12-04 07:24 | <a href="taxonomy/term/22">Category Theory</a> | <a href="taxonomy/term/11">Functional</a> | <a href="http://www.technorati.com/search/lambda-the-ultimate.org/node/2555" title="Technorati search of other blogs commenting on this post.">other blogs</a> | 1214 reads</div>
</div>
<a id="comment"></a>
<form method="post" action="comment"><div>
<h2 class="title">Comment viewing options</h2><div><div class="form-item">
 <select name="mode"> <option value="1">Flat list - collapsed</option>
 <option value="2">Flat list - expanded</option>
 <option value="3">Threaded list - collapsed</option>
 <option value="4" selected="selected">Threaded list - expanded</option>
</select>
<select name="order"> <option value="1">Date - newest first</option>
 <option value="2" selected="selected">Date - oldest first</option>
</select>
<select name="comments_per_page"> <option value="10">10 comments per page</option> <option value="30">30 comments per page</option> <option value="50">50 comments per page</option> <option value="70">70 comments per page</option> <option value="90">90 comments per page</option> <option value="150">150 comments per page</option> <option value="200" selected="selected">200 comments per page</option></select>
<input type="hidden" name="threshold" value="0" />
 <input type="submit" class="form-submit" name="op" value="Save settings"  />

 <div class="description">Select your preferred way to display the comments and click "Save settings" to activate your changes.</div>
</div>
</div><input type="hidden" name="edit[nid]" value="2555" />
</div></form><form method="post" action="comment"><div>
<input type="hidden" name="edit[nid]" value="2555" />
<a id="comment-38485"></a>
<div class="comment">
 <h3 class="title"><a href="node/2555#comment-38485" class="active">n-categories?</a></h3>
 <div class="content"><p >(This is a very cool paper!)</p>
<p >The main result seems to be that fold and unfold are natural transformations on a higher-order category. Even though definitions are relatively straightforward, I think it gets confusing to talk about hofunctions, honts, etc. I wonder if using 2-categories would simplify the presentation, like what John Baez talks about all the time in his column, eg. <a href="http://math.ucr.edu/home/baez/week80.html">week80</a>.</p>
<p >IIRC, natural transformations are simply the 2-morphisms in Cat. So it would seem that honts would be "regular" natural transformations on these 2-morphisms, or simply the 3-morphisms between the 2-morphisms?</p>
<p >The reason I ask this is: is there any hope to push this further and make a "kind-generic fold"? I'm assuming that there exists a natural "extension" of types into kinds that preserves everything necessary for datatypes, which I'm not sure is the case.</p>
<p >(It should be pretty clear that I know very little category theory, having only barely survived an undergrad course on it - feel free to tell me I'm horribly wrong!)</p></div>
 <div class="links">By <a href="user/923" title="View user profile.">Carlos Scheidegger</a> at Tue, 2007-12-04 16:11 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<a id="comment-38491"></a>
<div class="comment">
 <h3 class="title"><a href="node/2555#comment-38491" class="active">Genericity</a></h3>
 <div class="content"><p >Translating this stuff into category theory isn't essential.  It's sufficient to enumerate the coherence that laws folds are guaranteed to obey in a particular type system.  The later approach is preferable, as abstract category theory presentations of these topics tend to obscure the results from programmers who could otherwise put them into practice.</p>
<p >To me, the paper's key point is that the Generic Haskell approach is ad hoc (resulting in fewer universal properties), whereas the Algebra of Programming approach is more lawful.</p>
<p >I realized a while ago that "zip" ought to be called "transpose", as the underlying operation is to translate a value of F(G(t)) to G(F(t)) using the underlying join.  For example, you can naturally zip an array of dictionaries into a dictionary of arrays, where the resulting dictionary contains, for every index in the original dictionaries, the ordered concatenation of all values under that index from all of the sources.</p>
<p >Everyone has a fairly good understanding of functors and monads nowadays, but I feel like we're just scratching the surface of the generalizations that are possible regarding transformations between them.  </p></div>
 <div class="links">By <a href="user/97" title="View user profile.">Tim Sweeney</a> at Tue, 2007-12-04 19:50 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<a id="comment-38496"></a>
<div class="comment">
 <h3 class="title"><a href="node/2555#comment-38496" class="active">Did anyone else realize...</a></h3>
 <div class="content"><p >...that fold() is an FSA emulator when we make the list a list of state transitions, and the initial value the FSA's initial state, and the application function apply a state transition to the state?</p>
<p >. . .</p>
<p >I guess this also presents another way to use fold--to implement a list monad.</p>
<p >And again, we might be able to use fold to implement some mechanics of STM.</p></div>
 <div class="links">By <a href="user/4852" title="View user profile.">Winheim Raulsh</a> at Tue, 2007-12-04 23:35 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-38497"></a>
<div class="comment">
 <h3 class="title"><a href="node/2555#comment-38497" class="active">Fold for program semantics</a></h3>
 <div class="content"><blockquote ><p >
fold() is an FSA emulator when we make the list a list of state transitions
</p></blockquote>
<p >This is the essential idea presented in <a href="http://citeseer.ist.psu.edu/298179.html">Fold and Unfold for Program Semantics</a> (previously <a href="/classic/message4548.html">on LtU</a>.)  The paper is talking about using fold on functional evaluators, but of course evaluators can be mapped to FSAs (e.g., via <a href="/node/2423">this sort of correspondence</a>).</p></div>
 <div class="links">By <a href="user/2" title="View user profile.">Anton van Straaten</a> at Wed, 2007-12-05 00:20 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<div style="margin-left:25px;">
<a id="comment-38507"></a>
<div class="comment">
 <h3 class="title"><a href="node/2555#comment-38507" class="active">Very well known</a></h3>
 <div class="content"><p >foldr c n for any c and n is a monoid action as I mentioned <a href="http://lambda-the-ultimate.org/node/1824#comment-35096">here</a>.  M-Sets are <i >exactly</i> the thing computer scientists use to (formally) represent state machines.  Barr and Wells' <a href="http://www.let.uu.nl/esslli/Courses/barr-wells.html">lecture notes</a> (an intro to category theory from a computer scientist perspective) have good discussion of this relationship and how it is viewed categorically (see particularly section 4.2.5).</p></div>
 <div class="links">By <a href="user/1510" title="View user profile.">Derek Elkins</a> at Wed, 2007-12-05 03:39 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<a id="comment-38502"></a>
<div class="comment">
 <h3 class="title"><a href="node/2555#comment-38502" class="active">I&#039;m very interested in</a></h3>
 <div class="content"><p >I'm very interested in polytypic programming and was a big fan of representation types ala RepLib, so I'm very intrigued by this paper. I'll admit that it seems a tad beyond my current understanding though. I understand the conclusion (re: fold &gt; Rep types), and can even abstractly understand why as I've always thought that folding over a type's structure is the only necessary polytypic operation, but I haven't studied enough category theory to follow the exact argument or how it translates to programming practice. If anyone can boil it down to some concrete type signatures, I'd be much obliged! :-)</p></div>
 <div class="links">By <a href="user/2352" title="View user profile.">naasking</a> at Wed, 2007-12-05 01:23 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div></form>
<!-- end content -->
 <div id="footer"><hr style="border-width: 0pt 0pt 1px;" />
Logs:
          <a href="http://wmf.editthispage.com/">Hack The Planet</a>
          ; <a href="http://www.javalobby.org">JavaLobby</a>
          ; <a href="http://www.pythonware.com/daily">Daily Python-URL</a>
 ; <a href="http://thedailywtf.com/default.aspx">Daily WTF</a>
 ; <a href="http://phplens.com/phpeverywhere/">PHP everywhere</a> ; <a href="/node/view/13">(more)</a><br>
Wikis:
         <a href="http://c2.com/cgi/wiki?RecentChanges">WikiWiki</a>
         ; <a href="http://erlang.sics.se/wiki.html">Erlang</a>
; <a href="http://ww.telent.net/cliki/Recent%20Changes">Common Lisp</a>


         ; <a href="http://www.haskell.org/haskellwiki/Special:Recentchanges">Haskell</a>
         ; <a href="
http://wiki.squeak.org/squeak/recent">Squeak</a>
         ; <a href="http://purl.org/thecliff/tcl/wiki">Tcl</a> ; <a href="http://www.program-transformation.org/Transform/WebChanges">Program Transformation</a>
<img src="http://sac.appsolutions.com/hitme?id=ltu&a=hit">
</div>
   </td>
   <td id="sidebar-right"><div class="block block-archive" id="block-archive-0">
 <h2 class="title">Browse archives</h2>
 <div class="content">
<!-- calendar -->
<div class="calendar"><table summary="A calendar to browse the archives.">
 <caption><a href="archive/2007/11/10" title="Previous month">«</a> December 2007  </caption>
 <tr class="header-week">
 <th abbr="Sunday">Su</th>
 <th abbr="Monday">Mo</th>
 <th abbr="Tuesday">Tu</th>
 <th abbr="Wednesday">We</th>
 <th abbr="Thursday">Th</th>
 <th abbr="Friday">Fr</th>
 <th abbr="Saturday">Sa</th>
</tr>
 <tr class="row-week"><td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
  <td class="day-link"><a href="archive/2007/12/1" title="1 post">1</a></td>
 </tr>
 <tr class="row-week">
  <td class="day-link"><a href="archive/2007/12/2" title="3 posts">2</a></td>
  <td class="day-link"><a href="archive/2007/12/3" title="2 posts">3</a></td>
  <td class="day-link"><a href="archive/2007/12/4" title="3 posts">4</a></td>
  <td class="day-link"><a href="archive/2007/12/5" title="4 posts">5</a></td>
  <td class="day-link"><a href="archive/2007/12/6" title="2 posts">6</a></td>
  <td class="day-link"><a href="archive/2007/12/7" title="2 posts">7</a></td>
  <td class="day-normal">8</td>
 </tr>
 <tr class="row-week">
  <td class="day-normal">9</td>
  <td class="day-today"><a href="archive/2007/12/10" title="1 post">10</a></td>
  <td class="day-future">11</td>
  <td class="day-future">12</td>
  <td class="day-future">13</td>
  <td class="day-future">14</td>
  <td class="day-future">15</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">16</td>
  <td class="day-future">17</td>
  <td class="day-future">18</td>
  <td class="day-future">19</td>
  <td class="day-future">20</td>
  <td class="day-future">21</td>
  <td class="day-future">22</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">23</td>
  <td class="day-future">24</td>
  <td class="day-future">25</td>
  <td class="day-future">26</td>
  <td class="day-future">27</td>
  <td class="day-future">28</td>
  <td class="day-future">29</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">30</td>
  <td class="day-future">31</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
</tr>
</table></div>

</div>
</div>
<div class="block block-forum" id="block-forum-0">
 <h2 class="title">Active forum topics</h2>
 <div class="content"><div class="item-list"><ul><li><a href="node/2566" title="18 comments">A Growable Language Manifesto</a></li><li><a href="node/2562" title="70 comments">poll: syntax</a></li><li><a href="node/2568" title="64 comments">functions, statements, expressions</a></li><li><a href="node/2556" title="5 comments">Subtext 2 Video</a></li><li><a href="node/2567">Haskell, Turned Up To Eleven</a></li></ul></div><div class="more-link"><a href="forum" title="Read the latest forum topics.">more</a></div></div>
</div>
<div class="block block-forum" id="block-forum-1">
 <h2 class="title">New forum topics</h2>
 <div class="content"><div class="item-list"><ul><li><a href="node/2568" title="64 comments">functions, statements, expressions</a></li><li><a href="node/2567">Haskell, Turned Up To Eleven</a></li><li><a href="node/2566" title="18 comments">A Growable Language Manifesto</a></li><li><a href="node/2565" title="4 comments">Weak normalisation theorem for typed lambda-calculus</a></li><li><a href="node/2562" title="70 comments">poll: syntax</a></li></ul></div><div class="more-link"><a href="forum" title="Read the latest forum topics.">more</a></div></div>
</div>
</td>
  </tr>
 </table>
 </body>
</html>
