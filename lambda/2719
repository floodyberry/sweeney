<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
 <title>Variation of C&#039;s inline conditional  | Lambda the Ultimate</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<base href="http://lambda-the-ultimate.org/" />
<style type="text/css" media="all">@import "misc/drupal.css";</style> <link rel="SHORTCUT ICON" href="favicon.ico"> <link rel="stylesheet" type="text/css" href="themes/chameleon/common.css" />
<style type="text/css" media="all">@import "themes/chameleon/ltu/style.css";</style></head><body>
 <div id="header">  <h1 class="site-name title"><a href="">Lambda the Ultimate</a></h1>  <img src="themes/chameleon/ltu/tagline.png" alt="The Programming Languages Weblog" /><div id="search-form" style="text-align:right;"><form action="search" method="post">  <input class="form-text" type="text" size="15" value="" name="edit[keys]" id="edit-keys" />&nbsp;  <input class="form-submit" type="submit" value="Search" />&nbsp;</form></div>
</div>
 <table id="content">
  <tr>
   <td id="sidebar-left"><div class="block block-block" id="block-block-1">
 <h2 class="title"></h2>
 <div class="content"><b>
<div style="text-align:right">
<p>
<a href="/rss.xml"><img src="/misc/xml.gif" border=0 /></a><p>
<a href="/">Home</a><p>
<a href="/node/view/34">Feedback</a><p>
<a href="/node/view/40">FAQ</a><p>
<a href="node/view/492">Getting Started</a><p>
<a href="/forum/1">Discussions</a><p>
<a href="/forum/2">Site operation discussions</a><p>
<a href="/tracker">Recent Posts</a><p>
<a href="/node/add/forum/1">(new topic)</a><p>
<a href="/node/view/49">Departments</a><p>
<a href="/node/view/2">Courses</a><p>
<a href="/node/view/4">Research Papers</a><p>
<a href="/node/view/3">Design Docs</a><p>
<a href="/node/view/5">Quotations</a><p>
<a href="/node/view/7">Genealogical Diagrams</a><p>
<a href="/classic/lambda-archive1.html">Archives</a>
</div>
</b>
<hr style="border-width:0 0 1px 0" />
</div>
</div>
<div class="block block-user" id="block-user-0">
 <h2 class="title">User login</h2>
 <div class="content"><form action="user/login?destination=node%2F2719" method="post">
<div class="user-login-block">
<div class="form-item">
 <label for="edit-name">Username:</label><br />
 <input type="text" maxlength="64" class="form-text" name="edit[name]" id="edit-name" size="15" value="" />
</div>
<div class="form-item">
 <label for="edit-pass">Password:</label><br />
 <input type="password" class="form-password" maxlength="64" name="edit[pass]" id="edit-pass" size="15" value="" />
</div>
<input type="submit" class="form-submit" name="op" value="Log in"  />
</div>

</form>
<div class="item-list"><ul><li><a href="user/register" title="Create a new user account.">Create new account</a></li><li><a href="user/password" title="Request new password via e-mail.">Request new password</a></li></ul></div></div>
</div>
<div class="block block-user" id="block-user-1">
 <h2 class="title">Navigation</h2>
 <div class="content"><div class="menu">
<ul>
<li class="leaf"><a href="tracker">recent posts</a></li>

</ul>
</div></div>
</div>
</td>
   <td id="main">
<div class="breadcrumb"><a href="">Home</a> &raquo; <a href="forum">forums</a> &raquo; <a href="forum/1">LtU Forum</a></div><h2>Variation of C&#039;s inline conditional </h2>
<!-- begin content -->
<div class="node">
 <div class="content">
<p >The C language has an inline conditional statement, in the form:<br >
   condition ? exprA : exprB<br >
Now, many times exprA is a component of the condition, for example:<br >
   (somebigexpression) != 0 ? (somebigexpression) : (defaultexpression)</p>
<p >I'm looking for a form of the inline conditional that doesn't repeat the "somebigexpression" in the above situation, without assigning it to an intermediate variable.  I was thinking something along the lines of this syntax:<br >
   (somebigexpression) !=? 0 : (defaultexpression)<br >
where if the "?" follows a comparison operator, then if true it will return the left side of the comparison; else it returns the right side of the ":".</p>
<p >So two questions... 1) Would this be useful enough in practice to bother adding it to a language (i.e., does it make the code more clear v.s. assigning the original expression to a temp variable)? and 2) Does another language already have a syntax that accomplishes the same thing that I can borrow from?</p>
<p >Thanks.</p> </div>
 <div class="links">By <a href="user/3655" title="View user profile.">derekp</a> at 2008-03-13 01:31 | <a href="taxonomy/term/1">LtU Forum</a> | <a href="node/1478" title="Non-null references?">previous forum topic</a> | <a href="node/2714" title="[Ask LTU]  How to implement concurrent languages ?">next forum topic</a> | <a href="http://www.technorati.com/search/lambda-the-ultimate.org/node/2719" title="Technorati search of other blogs commenting on this post.">other blogs</a> | 1059 reads</div>
</div>
<a id="comment"></a>
<form method="post" action="comment"><div>
<h2 class="title">Comment viewing options</h2><div><div class="form-item">
 <select name="mode"> <option value="1">Flat list - collapsed</option>
 <option value="2">Flat list - expanded</option>
 <option value="3">Threaded list - collapsed</option>
 <option value="4" selected="selected">Threaded list - expanded</option>
</select>
<select name="order"> <option value="1">Date - newest first</option>
 <option value="2" selected="selected">Date - oldest first</option>
</select>
<select name="comments_per_page"> <option value="10">10 comments per page</option> <option value="30">30 comments per page</option> <option value="50">50 comments per page</option> <option value="70">70 comments per page</option> <option value="90">90 comments per page</option> <option value="150">150 comments per page</option> <option value="200" selected="selected">200 comments per page</option></select>
<input type="hidden" name="threshold" value="0" />
 <input type="submit" class="form-submit" name="op" value="Save settings"  />

 <div class="description">Select your preferred way to display the comments and click "Save settings" to activate your changes.</div>
</div>
</div><input type="hidden" name="edit[nid]" value="2719" />
</div></form><form method="post" action="comment"><div>
<input type="hidden" name="edit[nid]" value="2719" />
<a id="comment-40669"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40669" class="active">Scheme</a></h3>
 <div class="content"><p >Scheme's cond form allows something like this, <a href="http://download.plt-scheme.org/doc/372/html/r5rs/r5rs-Z-H-7.html#%_sec_4.2.1">defined here</a></p>
<p >Your example could be compared to </p>
<pre >(cond ((<i >somebigexpression</i>)  =&gt; id)
      (else <i >defaultexpression</i>))</pre><p >
Really, though, if <i >somebigexpression</i> is textually big, it should be broken up and stored in a variable or name binding for the sake of legibility.</p></div>
 <div class="links">By <a href="user/3846" title="View user profile.">J Meier</a> at Thu, 2008-03-13 02:44 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40673"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40673" class="active">Thanks...</a></h3>
 <div class="content"><p >By "somebigexpression", I was referring to a possibly long-running expression, maybe a function call with possible side effects.  But even then, it may be better to store the result in a temp variable... I'll have to run through a few code samples to see what looks best.<br >
Now I need to figure out how this would look in an infix-style language.</p></div>
 <div class="links">By <a href="user/3655" title="View user profile.">derekp</a> at Thu, 2008-03-13 03:14 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40688"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40688" class="active">Alternatively</a></h3>
 <div class="content"><p >Alternatively, </p>
<pre >(or some-big-expression default-expression)</pre><p > if your are testing for #f.</p></div>
 <div class="links">By <a href="user/3230" title="View user profile.">shaurz</a> at Thu, 2008-03-13 17:32 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<a id="comment-40670"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40670" class="active">Scheme has something like that</a></h3>
 <div class="content"><p >Scheme's COND is essentially a sequence of predicate-consequent pairs with an optional else at the end.  But in place of a simple pair you can use predicate =&gt; consequent instead.  In that case, rather than just returning the value of the consquent, that value (which must be a procedure) is applied to the value of the predicate (any value other than false is accounted true in Scheme), and the result of the procedure call is returned instead.</p>
<p >An example is where the predicate is a call to ASSOC (a Scheme function that searches a list of key-value pairs for a given key, and returns the first matching key-value pair, or false if there is none). A useful consequent-predicate in that case is CDR, which retrieves the value from the pair.</p></div>
 <div class="links">By <a href="user/2010" title="View user profile.">johnwcowan</a> at Thu, 2008-03-13 02:59 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<a id="comment-40671"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40671" class="active">C# has something like that too</a></h3>
 <div class="content"><p >Just for checking for null, not zero.  Syntax is:</p>
<pre >
 (somebigexpr) ?? (default)
</pre><p >meaning, the result of (somebigexpr) unless it is null, in which case the result of (default).</p></div>
 <div class="links">By <a href="user/4535" title="View user profile.">Luke Blanshard</a> at Thu, 2008-03-13 03:06 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40674"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40674" class="active">?? looks like I&#039;m in trouble</a></h3>
 <div class="content"><p >In 2e, I'm using the ?? symbol as an iterative inline conditional, so it looks like I already have a token conflict...<br >
  condition ?? trueloop : false_expr<br >
where trueloop executes as long as condition is true, and false_expr gets executed only if the condition wasn't initially true (the final value trueloop expression value (or false_expr) gets returned as the entire expression's return value).<br >
Hopefully I won't get too may complaints, otherwise I'll have to figure out a different symbol to use for my iterative conditional.</p></div>
 <div class="links">By <a href="user/3655" title="View user profile.">derekp</a> at Thu, 2008-03-13 03:20 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<a id="comment-40672"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40672" class="active">OR?</a></h3>
 <div class="content"><p >It looks like your specific example can be phrased:</p>
<p >  (somebigexpression) || (defaultexpression)</p>
<p >.. abuse of logical operators? Probably. Common idiom in every programming language? As far as I know.</p>
<p >I know that's not the whole story: sometimes a test for false isn't enough, sometimes you have a pipeline of functions to apply until the first one returns false .. perhaps there's an ideal basis to express all of this but I haven't found it yet.</p></div>
 <div class="links">By <a href="user/5448" title="View user profile.">doran</a> at Thu, 2008-03-13 03:10 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<a id="comment-40677"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40677" class="active">Not standard C,</a></h3>
 <div class="content"><p >but GCC has (in both C++ and C) a nonstandard extension that has exactly the semantics you want:</p>
<p >A ternary conditional which omits the center expression, i.e. </p>
<p ><i >expr1</i> <code >? :</code> <i >expr2</i></p>
<p >has the following semantics:  The expression <i >expr1</i> is evaluated; and if it converts to true (i.e.it is true, a nonzero number or char, a non-NULL pointer, or an object implementing <code >operator bool</code> which returns true); it is returned; otherwise the value of <i >expr2</i> is returned.</p>
<p >Note that <i >expr1</i> is evaluated exactly once, and <i >expr2</i> is evaluated if and only if <i >expr1</i> is false.</p>
<p >See <a href="http://gcc.gnu.org/onlinedocs/gcc-4.3.0/gcc/Conditionals.html#Conditionals">this doc page</a> for more information (this page is for 4.3.0, which just was released, but older versions of GCC have supported this extension for years.  Certain compiler flags (such as -ansi) may disable this extension; consult the manual for details.</p>
<p >Don't know if any other C/C++ compilers (MS, etc) support this extension or not.</p></div>
 <div class="links">By <a href="user/176" title="View user profile.">Scott Johnson</a> at Thu, 2008-03-13 05:59 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<a id="comment-40679"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40679" class="active">not beautiful but DRY.</a></h3>
 <div class="content"><p >isn't this the same?</p>
<pre >
#define IFF(x,y) x != 0 ? x : y
</pre><p >
Ruby does this and a little more using || and ||=, (and others)<br >
I have found that it is clearer to use these operators than to expand them.</p></div>
 <div class="links">By <a href="user/1397" title="View user profile.">Rahul Nair</a> at Thu, 2008-03-13 08:26 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40680"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40680" class="active">Not the same</a></h3>
 <div class="content"><p >That macro causes x to be evaluated twice, if true.</p>
<p >I'm not aware of any way to write an abstraction with the required semantics in standard C/C++; you want the first argument (x) to be strict, but the second argument (y) to be lazy.  Arguments to functions are always strict in C/C++, so you can't use a function (including a class member function).  Laziness is possible with C/C++ macros; but since they use call-by-name they don't memoize--and in general, macros which introduce a new scope cannot return values.</p></div>
 <div class="links">By <a href="user/176" title="View user profile.">Scott Johnson</a> at Thu, 2008-03-13 10:10 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40689"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40689" class="active">Would this work better?</a></h3>
 <div class="content"><p >#define IFF(x,y) { int _x = x; _x ? _x : y; }</p>
<p >I'm not sure if there return value of a C block is the always the value of last statement of the block, but this solves the multiple evaluation of x problem the original definition had...</p>
<p >I'd test it but my cygwin is broken right now.  Correct me if I'm wrong.</p>
<p >[correction: I was wrong ;-) or at least you can't 'return' a block statement like that...unfortunate.  I'm getting too used to lisp. ]</p></div>
 <div class="links">By <a href="user/1622" title="View user profile.">kruhft</a> at Thu, 2008-03-13 17:51 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<div style="margin-left:50px;">
<a id="comment-40692"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40692" class="active">This expression form would</a></h3>
 <div class="content"><p >This expression form would work only in GCC compilers:</p>
<pre >#define IFF(x,y) { int _x = x, _x ? _x : y }</pre><p >It's a GNU extension.</p></div>
 <div class="links">By <a href="user/2352" title="View user profile.">naasking</a> at Thu, 2008-03-13 18:12 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<a id="comment-40695"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40695" class="active">Conditional</a></h3>
 <div class="content"><p >I think D exposed c?:b, meaning "c? c: b".  In C++, you could also redefine "a||b" to mean "a? a: b", which agrees with the existing bool operator||(bool,bool), but naturally extends to any type that has a conversion to bool.  Also, see Icon, which does some even more interesting stuff separating conditional failure from boolean values.</p></div>
 <div class="links">By <a href="user/97" title="View user profile.">Tim Sweeney</a> at Thu, 2008-03-13 18:27 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40697"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40697" class="active">Overloading operator || does not work here.</a></h3>
 <div class="content"><p >Overloaded versions of operator &amp;&amp; and ||, like any other overloaded binary operators in C++, are eager in all their arguments (whereas the default versions of || and &amp;&amp;, applied to booleans, are both lazy operators.</p>
<p >Quite a few writers on C++ topics suggest avoiding the overloading of &amp;&amp; and || for this reason.</p>
<p >Now, if strictness is OK, then overloading || will suffice.  But often times, the point of these conditionals is that they are lazy.</p></div>
 <div class="links">By <a href="user/176" title="View user profile.">Scott Johnson</a> at Thu, 2008-03-13 18:37 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<div style="margin-left:25px;">
<a id="comment-40721"></a>
<div class="comment">
 <h3 class="title"><a href="node/2719#comment-40721" class="active">Groovy also</a></h3>
 <div class="content"><p ><a href="http://groovy.codehaus.org/">Groovy</a> also has <code >?:</code>, with <code >a ?: b</code> equivalent to <code >a ? a : b</code>. (In fact, early mailing list remarks left me with the impression that it actually was implemented in a way that evaluated <code >a</code> twice.)</p>
<p >Trivia: Groovy folk refer to this as the <i >Elvis</i> operator.</p></div>
 <div class="links">By <a href="user/2870" title="View user profile.">joel.neely</a> at Fri, 2008-03-14 12:18 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
</div></form>
<!-- end content -->
 <div id="footer"><hr style="border-width: 0pt 0pt 1px;" />
Logs:
          <a href="http://wmf.editthispage.com/">Hack The Planet</a>
          ; <a href="http://www.javalobby.org">JavaLobby</a>
          ; <a href="http://www.pythonware.com/daily">Daily Python-URL</a>
 ; <a href="http://thedailywtf.com/default.aspx">Daily WTF</a>
 ; <a href="http://phplens.com/phpeverywhere/">PHP everywhere</a> ; <a href="/node/view/13">(more)</a><br>
Wikis:
         <a href="http://c2.com/cgi/wiki?RecentChanges">WikiWiki</a>
         ; <a href="http://erlang.sics.se/wiki.html">Erlang</a>
; <a href="http://ww.telent.net/cliki/Recent%20Changes">Common Lisp</a>


         ; <a href="http://www.haskell.org/haskellwiki/Special:Recentchanges">Haskell</a>
         ; <a href="
http://wiki.squeak.org/squeak/recent">Squeak</a>
         ; <a href="http://purl.org/thecliff/tcl/wiki">Tcl</a> ; <a href="http://www.program-transformation.org/Transform/WebChanges">Program Transformation</a>
<img src="http://sac.appsolutions.com/hitme?id=ltu&a=hit">
</div>
   </td>
   <td id="sidebar-right"><div class="block block-archive" id="block-archive-0">
 <h2 class="title">Browse archives</h2>
 <div class="content">
<!-- calendar -->
<div class="calendar"><table summary="A calendar to browse the archives.">
 <caption><a href="archive/2008/03/03" title="Previous month">«</a> April 2008  </caption>
 <tr class="header-week">
 <th abbr="Sunday">Su</th>
 <th abbr="Monday">Mo</th>
 <th abbr="Tuesday">Tu</th>
 <th abbr="Wednesday">We</th>
 <th abbr="Thursday">Th</th>
 <th abbr="Friday">Fr</th>
 <th abbr="Saturday">Sa</th>
</tr>
 <tr class="row-week"><td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
  <td class="day-link"><a href="archive/2008/4/1" title="3 posts">1</a></td>
  <td class="day-link"><a href="archive/2008/4/2" title="1 post">2</a></td>
  <td class="day-today">3</td>
  <td class="day-future">4</td>
  <td class="day-future">5</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">6</td>
  <td class="day-future">7</td>
  <td class="day-future">8</td>
  <td class="day-future">9</td>
  <td class="day-future">10</td>
  <td class="day-future">11</td>
  <td class="day-future">12</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">13</td>
  <td class="day-future">14</td>
  <td class="day-future">15</td>
  <td class="day-future">16</td>
  <td class="day-future">17</td>
  <td class="day-future">18</td>
  <td class="day-future">19</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">20</td>
  <td class="day-future">21</td>
  <td class="day-future">22</td>
  <td class="day-future">23</td>
  <td class="day-future">24</td>
  <td class="day-future">25</td>
  <td class="day-future">26</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">27</td>
  <td class="day-future">28</td>
  <td class="day-future">29</td>
  <td class="day-future">30</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
</tr>
</table></div>

</div>
</div>
<div class="block block-forum" id="block-forum-0">
 <h2 class="title">Active forum topics</h2>
 <div class="content"><div class="item-list"><ul><li><a href="node/2748" title="2 comments">trying to see forum+frontpage posts in order</a></li><li><a href="node/2747" title="2 comments">Overloading in a statically typed functional language</a></li><li><a href="node/2745" title="12 comments">future history of logic programming</a></li><li><a href="node/2186" title="2 comments">Extensible Pattern Matching via a Lightweight Language</a></li><li><a href="node/2746" title="3 comments">the power of GNU Awk</a></li></ul></div><div class="more-link"><a href="forum" title="Read the latest forum topics.">more</a></div></div>
</div>
<div class="block block-forum" id="block-forum-1">
 <h2 class="title">New forum topics</h2>
 <div class="content"><div class="item-list"><ul><li><a href="node/2748" title="2 comments">trying to see forum+frontpage posts in order</a></li><li><a href="node/2747" title="2 comments">Overloading in a statically typed functional language</a></li><li><a href="node/2746" title="3 comments">the power of GNU Awk</a></li><li><a href="node/2745" title="12 comments">future history of logic programming</a></li><li><a href="node/2744" title="5 comments">This class type</a></li></ul></div><div class="more-link"><a href="forum" title="Read the latest forum topics.">more</a></div></div>
</div>
</td>
  </tr>
 </table>
 </body>
</html>
