<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
 <title>large imperative code --&gt; functional | Lambda the Ultimate</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<base href="http://lambda-the-ultimate.org/" />
<style type="text/css" media="all">@import "misc/drupal.css";</style> <link rel="SHORTCUT ICON" href="favicon.ico"> <link rel="stylesheet" type="text/css" href="themes/chameleon/common.css" />
<style type="text/css" media="all">@import "themes/chameleon/ltu/style.css";</style></head><body>
 <div id="header">  <h1 class="site-name title"><a href="">Lambda the Ultimate</a></h1>  <img src="themes/chameleon/ltu/tagline.png" alt="The Programming Languages Weblog" /><div id="search-form" style="text-align:right;"><form action="search" method="post">  <input class="form-text" type="text" size="15" value="" name="edit[keys]" id="edit-keys" />&nbsp;  <input class="form-submit" type="submit" value="Search" />&nbsp;</form></div>
</div>
 <table id="content">
  <tr>
   <td id="sidebar-left"><div class="block block-block" id="block-block-1">
 <h2 class="title"></h2>
 <div class="content"><b>
<div style="text-align:right">
<p>
<a href="/rss.xml"><img src="/misc/xml.gif" border=0 /></a><p>
<a href="/">Home</a><p>
<a href="/node/view/34">Feedback</a><p>
<a href="/node/view/40">FAQ</a><p>
<a href="/forum/1">Discussions</a><p>
<a href="/forum/2">Site operation discussions</a><p>
<a href="/tracker">Recent Posts</a><p>
<a href="/node/add/forum/1">(new topic)</a><p>
<a href="/node/view/49">Departments</a><p>
<a href="/node/view/2">Courses</a><p>
<a href="/node/view/4">Research Papers</a><p>
<a href="/node/view/3">Design Docs</a><p>
<a href="/node/view/5">Quotations</a><p>
<a href="/node/view/7">Genealogical Diagrams</a><p>
<a href="/classic/lambda-archive1.html">Archives</a>
</div>
</b>
<hr style="border-width:0 0 1px 0" />
</div>
</div>
<div class="block block-user" id="block-user-0">
 <h2 class="title">User login</h2>
 <div class="content"><form action="user/login?destination=node%2F913" method="post">
<div class="user-login-block">
<div class="form-item">
 <label for="edit-name">Username:</label><br />
 <input type="text" maxlength="64" class="form-text" name="edit[name]" id="edit-name" size="15" value="" />
</div>
<div class="form-item">
 <label for="edit-pass">Password:</label><br />
 <input type="password" class="form-password" maxlength="64" name="edit[pass]" id="edit-pass" size="15" value="" />
</div>
<input type="submit" class="form-submit" name="op" value="Log in"  />
</div>

</form>
<div class="item-list"><ul><li><a href="user/register" title="Create a new user account.">Create new account</a></li><li><a href="user/password" title="Request new password via e-mail.">Request new password</a></li></ul></div></div>
</div>
<div class="block block-user" id="block-user-1">
 <h2 class="title">Navigation</h2>
 <div class="content"><div class="menu">
<ul>
<li class="leaf"><a href="tracker">recent posts</a></li>

</ul>
</div></div>
</div>
</td>
   <td id="main">
<div class="breadcrumb"><a href="">Home</a> &raquo; <a href="forum">forums</a> &raquo; <a href="forum/1">LtU Forum</a></div><h2>large imperative code --&gt; functional</h2>
<!-- begin content -->
<div class="node">
 <div class="content">
<p>(note the <a href="http://lambda-the-ultimate.org/node/view/850">complementary thread</a>)
</p>
<p>
Given an imperatively styled program in C, with complex shared state, how would people suggest converting it to functional style?
</p>
<BR>
<p>
The program I'm working with is <a href="http://chromium.sourceforge.net">Chromium</a>, which implements a stream-processing model over the OpenGL API, so that the calls from a graphics program (e.g. Quake) get turned into a stream of function calls that can be filtered/modified.
</p><p>
  To do this, Chromium contains a "state machine" which tracks all state contained in OpenGL: lighting, raster-position, textures, matrix-stacks, etc. etc.
</p><BR><p>
  Via google I found <a href="http://zoo.cs.yale.edu/classes/cs490/98-99b/jones.joshua.joshj/">HOGL</a>, a functionalish Haskell binding for OpenGL that lets you do things like:
</p>
<code><pre>
demo0 = runGraphics ( do
    w <- openWindow "Demo 0" (400, 400)
    print "Demo0 a very simple Hogl program"
    print "press any key to quit"
    draw w (WithColor blue
            (Translate (0,0,-50)
             (Scale (80,80,80)
              (Rotate 36 (1,1,0)
               (cube 1)))))
    getKey w
    closeWindow w
    )
</pre></code><p>
- that is, you can do <i>some</i> state-changes (here setting the current color and changing the modelview matrix) in a functional style.
</p><BR><p>
..anyway, how would people suggest to deal with a large state-machine like that in OpenGL?  Are there tools out there for semi-automation of the process?
</p>
 </div>
 <div class="links">By <a href="user/1195" title="View user profile.">dbfaken</a> at 08/16/2005 - 14:44 | <a href="taxonomy/term/1">LtU Forum</a> | <a href="node/914" title="Neko 1.0">previous forum topic</a> | <a href="node/918" title="Formal semantics for working programmers">next forum topic</a> | <a href="http://www.technorati.com/search/lambda-the-ultimate.org/node/913" title="Technorati search of other blogs commenting on this post.">other blogs</a> | 1787 reads</div>
</div>
<a id="comment"></a>
<form method="post" action="comment"><div>
<h2 class="title">Comment viewing options</h2><div><div class="form-item">
 <select name="mode"> <option value="1">Flat list - collapsed</option>
 <option value="2">Flat list - expanded</option>
 <option value="3">Threaded list - collapsed</option>
 <option value="4" selected="selected">Threaded list - expanded</option>
</select>
<select name="order"> <option value="1">Date - newest first</option>
 <option value="2" selected="selected">Date - oldest first</option>
</select>
<select name="comments_per_page"> <option value="10">10 comments per page</option> <option value="30">30 comments per page</option> <option value="50">50 comments per page</option> <option value="70">70 comments per page</option> <option value="90">90 comments per page</option> <option value="150">150 comments per page</option> <option value="200" selected="selected">200 comments per page</option></select>
<input type="hidden" name="threshold" value="0" />
 <input type="submit" class="form-submit" name="op" value="Save settings"  />

 <div class="description">Select your preferred way to display the comments and click "Save settings" to activate your changes.</div>
</div>
</div><input type="hidden" name="edit[nid]" value="913" />
</div></form><form method="post" action="comment"><div>
<input type="hidden" name="edit[nid]" value="913" />
<a id="comment-8830"></a>
<div class="comment">
 <h3 class="title"><a href="node/913#comment-8830" class="active">more state components</a></h3>
 <div class="content"><p >Here are some other parts of the OpenGL state, just to give an idea of its complexity:</p>
<p >* depth-cueing settings<br >
* buffer/vertex objects<br >
* shading programs &amp; variables<br >
* display-lists<br >
* settings for the various buffers (accumulation, stereo, stencil, ..)<br >
* material definitions<br >
* antialiasing settings<br >
* 3D-to-2D rasterization settings (clipping, viewports, etc.), and some window control<br >
* NURBS surface-equations/programs/"evaluators"<br >
* the "attribute" stacks, allowing pushing/popping of various subsets of the state.</p>
<p >These each effect various parts of the rendering pipeline:<br >
* rasterization and texture-assembly<br >
* pixel, per-vertex and per-fragment operations<br >
* writing into the framebuffer(s).</p>
<p >Chromium also manages the merging of various OpenGL CONTEXTS into a single context.  Contexts contain window-system specific state (context-management, visuals, windows, direct-rendering (DRI), swap/framelocking, pbuffers, OpenGL extensions, etc.)</p></div>
 <div class="links">By <a href="user/1195" title="View user profile.">dbfaken</a> at Tue, 08/16/2005 - 15:01 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-8909"></a>
<div class="comment">
 <h3 class="title"><a href="node/913#comment-8909" class="active">Calculations - Poor Man&#039;s Monad</a></h3>
 <div class="content"><p >This is a poor man's monad (it exposes state / doesn't use type classes) I use in ML - I still need to clean up the code though, and uhm, actually forgot how most of it works ;-). A calculation is a function which takes a state, and returns a value and a new state.<br >
The nret is equivalent to the monadic return, the nseq is equivalent to the monadic bind. If you can't figure out how it works, please ask and I'll show an example.</p>
<pre >
type ('a, 'b) calc = 'a -&gt; ('b * 'a)

let nret:'a -&gt; ('b, 'a) calc =
  function a -&gt; function b -&gt; (a,b)

let nseq:(('c, 'a) calc) -&gt; ('a-&gt;(('c, 'b) calc)) -&gt; (('c, 'b) calc) =
  function f -&gt; function g -&gt; function m0 -&gt;
    (function (a,m1) -&gt; g a m1) (f m0)

let nseq_discard:(('c, 'a) calc) -&gt; (('c, 'b) calc) -&gt; (('c, 'b) calc) =
  function f -&gt; function g -&gt; nseq f (function _ -&gt; g)

let napply:(('c, 'a) calc) -&gt; ('a -&gt; 'b) -&gt; (('c, 'b) calc) =
  function f -&gt; function g -&gt; nseq f (function x -&gt; nret (g x))

let ('c-&gt;'a =
   function n -&gt; function m -&gt; (function (a,m) -&gt; a) (n m)
</pre><p >
[Edit:] If you make OpenGL's state abstract and add some functions which operate on the state (see Tim's post) you can use the above combinators to express sequential calculations.</p></div>
 <div class="links">By <a href="user/1360" title="View user profile.">marco</a> at Fri, 08/19/2005 - 12:07 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<a id="comment-8834"></a>
<div class="comment">
 <h3 class="title"><a href="node/913#comment-8834" class="active">Display Lists</a></h3>
 <div class="content"><p >Immediate mode OpenGL is gratuitously imperative.  Keep in mind that the approach described above isn't functional; it's an imperative program abstracted over Haskell's IO Monad.</p>
<p >A pure functional approach would be to regard graphics rendering as a pure operation Render :: DisplayList -&gt; FrameBuffer, where a DisplayList is a list of elements of an algebraic datatype describing all OpenGL operations, and FrameBuffer is perhaps a 2D array of RGBA pixel values.  Rendering, at that level, is purely functional, in that the output of Render should (at least for a sane device) be a referentially transparent function of its parameter.</p></div>
 <div class="links">By <a href="user/97" title="View user profile.">Tim Sweeney</a> at Tue, 08/16/2005 - 16:42 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
<div style="margin-left:25px;">
<a id="comment-8838"></a>
<div class="comment">
 <h3 class="title"><a href="node/913#comment-8838" class="active">display lists vs. &quot;primitives&quot;</a></h3>
 <div class="content"><p >Yes, DisplayList -&gt; FrameBuffer is a functional description, but I was thinking of a richer one.</p>
<p >As a concrete example, rendering a scene might consist of specifying a drawing buffer, camera, lighting, and specular + diffuse color components for a material, followed by passing some polygons.</p>
<p >Without passing the polygons, the camera, lighting, etc. are essentially a No-Op: they do nothing to the buffer.</p>
<p >Thus we could say those OpenGL functions which change the framebuffer are the "primitives", and the others just specify parameters to those primitives.</p>
<p >Or, looking at the actual hardware implementation of OpenGL, there are several stages of the "graphics pipeline".  Some API calls affect the higher-level (upstream) operations (e.g. transformation matrices), some mid-level (e.g. lighting), some lower (raster-position, pixel operations).</p>
<p >More generally, its a very complex imperative system where operations can have very non-local side-effects. [Edit: basically there are lots of global variables]<br >
I'm interested in how one might convert this to a side-effect-free model, without always specifying the ENTIRE state of the system.</p>
<p >I could of course simulate an entire GPU (graphics processing unit) in a functional language.  This is what Chromium does, but imperatively; I just want to reuse this existing code (without writing a functional C interpreter :).</p></div>
 <div class="links">By <a href="user/1195" title="View user profile.">dbfaken</a> at Tue, 08/16/2005 - 18:43 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<div style="margin-left:50px;">
<a id="comment-8842"></a>
<div class="comment">
 <h3 class="title"><a href="node/913#comment-8842" class="active">So here&#039;s what I&#039;d do. Note t</a></h3>
 <div class="content"><p >So here's what I'd do. Note that I don't know a whole lot about OpenGL in particular, but I do have some experience functionalizing stateful APIs. </p>
<p >First, at the bottom level, I'd use a monad to encapsulate the state of the state machine. At this level, I would look at the state transition diagram for the API, and then try to capture that in the monadic API using phantom types. This would let you do more compile time error-checking than the C API to help ensure that procdures are only being called at the right times (eg, you can call certain functions only after initialization). </p>
<p >Then, I'd look for things that would let the programmer operate at a higher level. There are two big patterns here.</p>
<p >First, there are the "with-foo" API patterns, which look like this:</p>
<p >1. You call an initialization function to go into a certain mode foo.<br >
2. You call operations to build up something and eventually run it.<br >
3. You then call a cleanup function to leave the foo state and return to your original mode. </p>
<p >These APIs are the ones that are most easily "functionalized". Write a single function that takes some data and then does the mode switching "under the covers".  </p>
<p >Secondly, imperative APIs often have iterator APIs, which let you statefully traverse some data structure. Encapsulate these, giving the programmer a fold or a map with a purer type. This lets you drop the iterator state from the API. </p>
<p >After doing this, hide the low-level functions from the user API, and simplify the transition diagram, and see if you can't repeat the process. Eventually, you'll converge on something that looks somewhat functional. </p>
<p >Then, try writing some programs, and keep an eye out for common patterns of use. Use these to build additional combinators. One of the key advantages of a monadic interface is that you can treat commands as first-class values, and this lets you write custom control structures very easily. </p></div>
 <div class="links">By <a href="user/1111" title="View user profile.">neelk</a> at Tue, 08/16/2005 - 21:06 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div>
<a id="comment-8951"></a>
<div class="comment">
 <h3 class="title"><a href="node/913#comment-8951" class="active">examples?</a></h3>
 <div class="content"><p >[This was supposed to be a reply to neelk's post]</p>
<p >Can you point me to an example of the result of this kind of process?</p>
<p >thanks for all the replies, BTW.</p></div>
 <div class="links">By <a href="user/1195" title="View user profile.">dbfaken</a> at Mon, 08/22/2005 - 18:35 | <a href="user/login">login</a> or <a href="user/register">register</a> to post comments</div>
</div>
</div></form>
<!-- end content -->
 <div id="footer"><hr style="border-width: 0pt 0pt 1px;" />
Logs:
          <a href="http://wmf.editthispage.com/">Hack The Planet</a>
          ; <a href="http://www.javalobby.org">JavaLobby</a>
          ; <a href="http://www.pythonware.com/daily">Daily Python-URL</a>
 ; <a href="http://thedailywtf.com/default.aspx">Daily WTF</a>
 ; <a href="http://phplens.com/phpeverywhere/">PHP everywhere</a> ; <a href="/node/view/13">(more)</a><br>
Wikis:
         <a href="http://c2.com/cgi/wiki?RecentChanges">WikiWiki</a>
         ; <a href="http://erlang.sics.se/wiki.html">Erlang</a>
; <a href="http://ww.telent.net/cliki/Recent%20Changes">Common Lisp</a>


         ; <a href="http://www.haskell.org/hawiki/RecentChanges">Haskell</a>
         ; <a href="http://minnow.cc.gatech.edu/squeak/recent">Squeak</a>
         ; <a href="http://purl.org/thecliff/tcl/wiki">Tcl</a> ; <a href="http://www.program-transformation.org/Transform/WebChanges">Program Transformation</a>
<img src="http://sac.appsolutions.com/hitme?id=ltu&a=hit">
</div>
   </td>
   <td id="sidebar-right"><div class="block block-archive" id="block-archive-0">
 <h2 class="title">Browse archives</h2>
 <div class="content">
<!-- calendar -->
<div class="calendar"><table summary="A calendar to browse the archives.">
 <caption><a href="archive/2006/07/15" title="Previous month">«</a> August 2006  </caption>
 <tr class="header-week">
 <th abbr="Sunday">Su</th>
 <th abbr="Monday">Mo</th>
 <th abbr="Tuesday">Tu</th>
 <th abbr="Wednesday">We</th>
 <th abbr="Thursday">Th</th>
 <th abbr="Friday">Fr</th>
 <th abbr="Saturday">Sa</th>
</tr>
 <tr class="row-week"><td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
  <td class="day-link"><a href="archive/2006/8/1" title="3 posts">1</a></td>
  <td class="day-link"><a href="archive/2006/8/2" title="3 posts">2</a></td>
  <td class="day-link"><a href="archive/2006/8/3" title="5 posts">3</a></td>
  <td class="day-link"><a href="archive/2006/8/4" title="2 posts">4</a></td>
  <td class="day-normal">5</td>
 </tr>
 <tr class="row-week">
  <td class="day-link"><a href="archive/2006/8/6" title="1 post">6</a></td>
  <td class="day-link"><a href="archive/2006/8/7" title="2 posts">7</a></td>
  <td class="day-link"><a href="archive/2006/8/8" title="4 posts">8</a></td>
  <td class="day-link"><a href="archive/2006/8/9" title="3 posts">9</a></td>
  <td class="day-normal">10</td>
  <td class="day-normal">11</td>
  <td class="day-link"><a href="archive/2006/8/12" title="1 post">12</a></td>
 </tr>
 <tr class="row-week">
  <td class="day-link"><a href="archive/2006/8/13" title="3 posts">13</a></td>
  <td class="day-link"><a href="archive/2006/8/14" title="1 post">14</a></td>
  <td class="day-today"><a href="archive/2006/8/15" title="1 post">15</a></td>
  <td class="day-future">16</td>
  <td class="day-future">17</td>
  <td class="day-future">18</td>
  <td class="day-future">19</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">20</td>
  <td class="day-future">21</td>
  <td class="day-future">22</td>
  <td class="day-future">23</td>
  <td class="day-future">24</td>
  <td class="day-future">25</td>
  <td class="day-future">26</td>
 </tr>
 <tr class="row-week">
  <td class="day-future">27</td>
  <td class="day-future">28</td>
  <td class="day-future">29</td>
  <td class="day-future">30</td>
  <td class="day-future">31</td>
<td class="day-blank">&nbsp;</td>
<td class="day-blank">&nbsp;</td>
</tr>
</table></div>

</div>
</div>
<div class="block block-forum" id="block-forum-0">
 <h2 class="title">Active forum topics</h2>
 <div class="content"><div class="item-list"><ul><li><a href="node/1677">help with [Barendregt &amp; Barendsen, 1994]</a></li><li><a href="node/1676" title="4 comments">DSLs and AOP</a></li><li><a href="node/1671" title="7 comments">Lambda Calculus In Java</a></li><li><a href="node/1672" title="10 comments">Programming Languages in the Markup World</a></li><li><a href="node/1673" title="4 comments">How to make a *truly* better alternative to C++</a></li></ul></div><div class="more-link"><a href="forum" title="Read the latest forum topics.">more</a></div></div>
</div>
<div class="block block-forum" id="block-forum-1">
 <h2 class="title">New forum topics</h2>
 <div class="content"><div class="item-list"><ul><li><a href="node/1677">help with [Barendregt &amp; Barendsen, 1994]</a></li><li><a href="node/1676" title="4 comments">DSLs and AOP</a></li><li><a href="node/1673" title="4 comments">How to make a *truly* better alternative to C++</a></li><li><a href="node/1672" title="10 comments">Programming Languages in the Markup World</a></li><li><a href="node/1671" title="7 comments">Lambda Calculus In Java</a></li></ul></div><div class="more-link"><a href="forum" title="Read the latest forum topics.">more</a></div></div>
</div>
</td>
  </tr>
 </table>
 </body>
</html>
